/////////////////////////////////////////////////////////////////////////////
//
//               (c) 1999 by KEBA Ges.m.b.H & Co
//                        Linz/AUSTRIA
//                     All rights reserved
//
//  This source is supplied under the terms of a license agreement or
//  nondisclosure agreement with KEBA GesmbH & CO and may not be copied
//  or disclosed except in accordance with the terms of that agreement.
//  This program may not be used in a business, corporation, organization
//  or any other environment without a negotiated site license.
//
//  Programmer: Holz - 22/01/2001
//
//    $Archive: /KEMRO/WindowsDienste/OPCServer/Interface/KebaOpcAddOns/KebaOPCAddOns.idl $
//   $Revision: 4 $
//     $Author: Holz $
//       $Date: 12.07.01 8:24 $
//

import "oaidl.idl";
import "ocidl.idl";

/////////////////////////////////////////////////////////////////////////////
[
	object,
	uuid(B1FF6759-F04F-11d4-8315-009027578FBB),
	helpstring("Configuration Interface"),
	pointer_default(unique)
]
interface IKebaOpcConfig : IUnknown
{
        [helpstring("Login the specified user with the corresponding password.")]
        HRESULT Login(
                [in, string] LPCWSTR apUsername,
                [in, string] LPCWSTR apPassword
                );

        [helpstring("Logout the connected user.")]
        HRESULT Logout(
                );

        [helpstring("Add the system specified by its hostname to the configuration.")]
        HRESULT AddSystem(
                [in, string] LPCWSTR apSynonym,
                [in, string] LPCWSTR apHostname
                );

        [helpstring("Remove the system specified by its hostname from the configuration.")]
        HRESULT RemoveSystem(
                [in, string] LPCWSTR apSynonym
                );

};

/////////////////////////////////////////////////////////////////////////////
[
	object,
	uuid(FBDCCCE8-3B83-43C0-BAB0-9F45E96D337F),
	helpstring("Access Rights Interface"),
	pointer_default(unique)
]
interface IKebaOpcAccessRights : IUnknown
{
	[helpstring("Sets the input level according to the passed password.")]
	HRESULT SetInputLevelPassword(
		[in, string] LPCWSTR apInputLevelPassword,
		[out] DWORD * opInputLevel
		);

	[helpstring("Returns the current input level which affects the right to write items.")]
	HRESULT GetInputLevel(
		[out] DWORD * opInputLevel
		);

	[helpstring("Sets the display level according to the passed password.")]
	HRESULT SetDisplayLevelPassword(
		[in, string] LPCWSTR apDisplayLevelPassword,
		[out] DWORD * opDisplayLevel
		);

	[helpstring("Returns the current display level which affects the right to read items.")]
	HRESULT GetDisplayLevel(
		[out] DWORD * opDisplayLevel
		);
};


/////////////////////////////////////////////////////////////////////////////
// ALARMS

typedef struct tagTKebaOpcAlarm {
  [string] LPWSTR     Name;
           DWORD      MainId;
           DWORD      SubId1;
           DWORD      SubId2;
           DWORD      SubId3;
           DWORD      SubId4;
           DWORD      Param1;
           DWORD	  Param2;
           DWORD	  AlarmClass;
		   hyper      TimeStamp;
		   BOOL       Logging;
		   DWORD      AckMode;
		   DWORD      State;
} TKebaOpcAlarm;

[
	object,
	uuid(D848A641-7687-11d5-83A7-0004ACD86B9C),
	helpstring("Alarm Interface"),
	pointer_default(unique)
]
interface IKebaOpcAlarm : IUnknown
{
        [helpstring("Looks for pending alarms and fills opFirstPendingAlarm if there is at least one.")]
        HRESULT GetAlarmInfo(
                [in, string]      LPCWSTR         apSpsSynonym,
                [out]             DWORD *         opPendingAlarmCount,
				[in, out, unique] TKebaOpcAlarm * opFirstPendingAlarm
                );

        [helpstring("Retrieves all outstanding alarms.")]
        HRESULT ReadAlarms(
                [in, string]                   LPCWSTR          apSpsSynonym,
                [out]                          DWORD *          opResult,
                [out]                          DWORD *          opAlarmCount,
                [out, size_is(,*opAlarmCount)] TKebaOpcAlarm ** oppAlarms
                );

        [helpstring("Acknowledges an outstanding alarm of the specified system.")]
        HRESULT AckAlarm(
                [in, string]  LPCWSTR apSpsSynonym,
                [in]  DWORD   aMainId,
                [in]  DWORD   aSubId1,
                [in]  DWORD   aSubId2,
                [in]  DWORD   aSubId3,
                [in]  DWORD   aSubId4,
                [out] DWORD * opResult
                );

};
/////////////////////////////////////////////////////////////////////////////

[
	uuid(B1FF675A-F04F-11d4-8315-009027578FBB),
	version(1.1),
	helpstring("KEBA OPC Server Add-Ons 1.1 Type Library")
]
library KebaOpcAddOns
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	interface IKebaOpcConfig;
	interface IKebaOpcAlarm;
	interface IKebaOpcAccessRights;
};
